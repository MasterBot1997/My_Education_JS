1. Типы данных и переменных

 - ссылочны(Массивы)
 - примитивные(bollean, int, short, long, float, double Cgar и т.д.)

 getType() - Получение типа данных переменной

 int можно дробить нижним подчеркиванием(_) без проблем
 ++/-- ин/дикримет - если ввести перед переменнуй(++а) имеет приоритет выше чем вывод значения в консоль
 если после(а--) то приоритет будет ниже

----------------------------------------------------------------------------------------

 2. Знаки операций вычисления

 - & - побитовое сравнение, работает по логике сравенения битов двоичного кода
 где выбирается 0
 - | - побитовое сравнение, работает по логике сравенения битов двоичного кода
 где выбирается 0

 <</>>(Побитовый сдвиг влево или вправо) 

 При использовании && прверяются обе стороны независимо от результата
 При использовании & проверяется первая сторона и не идет дальше если ложь 

----------------------------------------------------------------------------------------

 3. получение данных от пользователя из консоли

 Для того что бы получить данные из консоли в начале кода импортируем:
 import java.util.Scanner;

static int data(){
    Scanner iScanner = new Scanner(System.in); - присваеваем сканнер в переменную
    System.out.printf("Number: "); - говорим пользователю что ввести
    Integer number = iScanner.nextInt(); - используем сканнер для получения данных в переменной(внимание, обязательно указывать тип данных)
    return number; 
}
----------------------------------------------------------------------------------------

 4. Функция
 
 Эффективнее создать в отдельном файле для использования в разных проектах.
 Создается так же как и обычный файл java, конструкция не отличается.
 Аналогично C# языку указывается тип данных функции, от чего будет зависить возвращаемое значение.

public class lib { - классическая конструкция программы
    static void sayHi(){ - назначение функции суказанием имени(sayHi) и типа данных(void)
        System.out.println("hi"); - тело функции и ее действия
    }
}

----------------------------------------------------------------------------------------

5. Вывод данных в консоль

Для вывода даннх используется строка - System.out.println();
В случае вывода нескольких значений подряд вконце строки стоит указывать перенос(\n) иначе вывод будет в одну строку

Пример форматирования вывода данных:

String res = String.format("%d + %d = %d", a, b, c); - сохраняем фарматированные данные в переменную
System.out.println(res); - выводим переменную с уже отфарматированным результатом

System.out.printf("%d + %d = %d \n", a, b, c); - используем printf т.к. хотим форматировать выводимые данные прямо в выводе

----------------------------------------------------------------------------------------

6. Форматирование текста

Спецификаторы:
%d - целочисленные значения
%x - для вывода шестналцатиричных чисел
%f - для вывода чисел с плавающей точкой
%e - для вывода чисел в экспоненциальной форме (Например: 3.1415е+01)
%c - для вывода одиночного символа
%s - для вывода строковых значений

----------------------------------------------------------------------------------------

7. Область видимости

Область видимости определяется фигурными скобками('{}')
Все что находитсянад ними попадет в поле действие области, но 
не должно быть одинаковых названий переменных в области видимости и над ней

После того как областьвидимости закрыта данные дальше не передаются, получается 
данныенаходящиеся внутри зоны видимости есть и используются до тех пор пока зона не закрыта
После закрытия данные будут не видны программе для использования дальше, но данные которые были выше зоны по прежнему можно использовать

Пример использования: можно делать маленькие проверки или дебаги не мешая работе основного кода в дальнейшем

----------------------------------------------------------------------------------------

8. Операторы и ветвления

8.1 if else (Оператор ветвления)

    классика
    if (Условие){
        program
    } else {
        prrogram
    }

    Тернарный оператор:
    int min = a < b ? a : b; где:
    - min - переменная которой присвоим результат
    - a < b - Условие
    - ? :  - оператор Если выполняется условие то возращаем значение слева 
            от :, если не выполняется то возвращаем то что справа

8.2 switch (Оператор выбора)

    Пример конструкции:
    int mounth = data; - переменная со значением полученным от пользователя
    String text = "";
    switch (mounth) {
        case 1:
            text = "Aboba";
            break;
        case 2:
            text = "Boba";
            break;
        default:
            break
    }

8.3 Циклы

    8.3.1 whil
        while (i != 0) {  - в скобках ксловие выхода из цикла
            действия;
        }

    8.3.2 do while - цикл спост условием, сначало что то делает потом проверяет
        do {
            i /= 10;
            count++;
        } while (i != 0);

    8.3.3 for и модификация for in
        for (int i = 0; i < 10; i++) {
            if (i % 2 = 0) 
                continue;
            System.out.println(i);
        }

----------------------------------------------------------------------------------------

9. Работа с файлами

В самомпростом варианте импортируем:
    import java.io.FileWriter;
    import.io.IOException;

----------------------------------------------------------------------------------------

10. Работа со строками

10.1 API для строк

- concat() - объединение строк
- valueOf() - преобразует Object в строковое представление (завязан на toString())
- join() - объединяет набор строк в одну строку с учетом разделителя
- charAt() - получение символа по индексу
- indexOf() - первый индекс вхождения подстроки
- lastIndexOf() - последний индекс вхождения подстроки
- startWith/endsWith() - определяет, начинается/заканчивается ли строка с подстроки
- replace() - замена одной подстроки на другую

https://app.idroo.com/boards/PDG6QPrXo1

11. Логгер

// Создали объект типа логгер для класса Task01(или класс в котором мы работаем)
Logger logger = Logger.getLogger(Task01.class.getName());
// Консоль хэндлер выводит все наши данные о логировании в терминал
// ConsoleHandler ch = new ConsoleHandler();
FileHandler fh = new FileHandler("log.txt");
// указываем логгеру наш хэндлер как аргумент что бы он понимал куда логи выводить
// logger.addHandler(ch);
logger.addHandler(fh);

// Для консоли
SimpleFormatter sFormat = new SimpleFormatter();
// ch.setFormatter(sFormat);
fh.setFormatter(sFormat);

// Вывод в xml файл
// XMLFormatter xml = new XMLFormatter();
// ch.setFormatter(xml);